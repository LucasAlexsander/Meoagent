import * as _react_types_shared from '@react-types/shared';
import * as tailwind_variants from 'tailwind-variants';
import * as _nextui_org_system from '@nextui-org/system';
import { HTMLNextUIProps, PropGetter } from '@nextui-org/system';
import { SlotsToClasses, UserSlots } from '@nextui-org/theme';
import { AvatarProps } from '@nextui-org/avatar';
import { ReactNode } from 'react';
import { ReactRef } from '@nextui-org/react-utils';

interface UseUserProps extends Omit<HTMLNextUIProps, "children"> {
    /**
     * Ref to the DOM node.
     */
    ref?: ReactRef<HTMLDivElement | null>;
    /**
     * The user name.
     */
    name: ReactNode | string;
    /**
     * The user information, like email, phone, etc.
     */
    description?: ReactNode | string;
    /**
     * Whether the user can be focused.
     * @default false
     */
    isFocusable?: boolean;
    /**
     * The user avatar props
     * @see https://nextui.org/docs/components/avatar
     */
    avatarProps?: AvatarProps;
    /**
     * Classname or List of classes to change the classNames of the avatar.
     * if `className` is passed, it will be added to the base slot.
     *
     * @example
     * ```ts
     * <User classNames={{
     *    base:"base-classes",
     *    wrapper: "wrapper-classes",
     *    name: "name-classes",
     *    description: "description-classes",
     * }} />
     * ```
     */
    classNames?: SlotsToClasses<UserSlots>;
}
declare function useUser(props: UseUserProps): {
    Component: _nextui_org_system.As<any>;
    className: string | undefined;
    slots: {
        base: (slotProps?: tailwind_variants.ClassProp<tailwind_variants.ClassValue> | undefined) => string;
        description: (slotProps?: tailwind_variants.ClassProp<tailwind_variants.ClassValue> | undefined) => string;
        name: (slotProps?: tailwind_variants.ClassProp<tailwind_variants.ClassValue> | undefined) => string;
        wrapper: (slotProps?: tailwind_variants.ClassProp<tailwind_variants.ClassValue> | undefined) => string;
    };
    name: ReactNode;
    description: ReactNode;
    classNames: SlotsToClasses<"base" | "description" | "name" | "wrapper"> | undefined;
    baseStyles: string;
    focusProps: _react_types_shared.DOMAttributes<_react_types_shared.FocusableElement>;
    avatarProps: AvatarProps;
    getUserProps: PropGetter<Record<string, unknown>, _nextui_org_system.DOMAttributes<_nextui_org_system.DOMElement>>;
};
type UseUserReturn = ReturnType<typeof useUser>;

export { UseUserProps, UseUserReturn, useUser };
