"use client";
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Dropdown: () => dropdown_default,
  DropdownItem: () => dropdown_item_base_default,
  DropdownMenu: () => dropdown_menu_default,
  DropdownSection: () => dropdown_section_base_default,
  DropdownTrigger: () => dropdown_trigger_default,
  useDropdown: () => useDropdown
});
module.exports = __toCommonJS(src_exports);

// src/dropdown.tsx
var import_react2 = __toESM(require("react"));
var import_popover = require("@nextui-org/popover");

// src/dropdown-context.ts
var import_react_utils = require("@nextui-org/react-utils");
var [DropdownProvider, useDropdownContext] = (0, import_react_utils.createContext)({
  name: "DropdownContext",
  errorMessage: "useDropdownContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Dropdown />`"
});

// src/use-dropdown.ts
var import_menu = require("@react-stately/menu");
var import_menu2 = require("@react-aria/menu");
var import_theme = require("@nextui-org/theme");
var import_shared_utils = require("@nextui-org/shared-utils");
var import_react_utils2 = require("@nextui-org/react-utils");
var import_react = require("react");
var import_utils = require("@react-aria/utils");
function useDropdown(props) {
  const {
    as,
    triggerRef: triggerRefProp,
    isOpen,
    defaultOpen,
    onOpenChange,
    type = "menu",
    trigger = "press",
    placement = "bottom",
    isDisabled = false,
    closeOnSelect = true,
    shouldBlockScroll = true,
    classNames: classNamesProp,
    disableAnimation = false,
    onClose,
    className,
    ...otherProps
  } = props;
  const Component = as || "div";
  const triggerRef = (0, import_react.useRef)(null);
  const menuTriggerRef = triggerRefProp || triggerRef;
  const menuRef = (0, import_react.useRef)(null);
  const popoverRef = (0, import_react.useRef)(null);
  const state = (0, import_menu.useMenuTriggerState)({
    trigger,
    isOpen,
    defaultOpen,
    onOpenChange: (isOpen2) => {
      onOpenChange == null ? void 0 : onOpenChange(isOpen2);
      if (!isOpen2) {
        onClose == null ? void 0 : onClose();
      }
    }
  });
  const { menuTriggerProps, menuProps } = (0, import_menu2.useMenuTrigger)(
    { type, trigger, isDisabled },
    state,
    menuTriggerRef
  );
  const classNames = (0, import_react.useMemo)(
    () => (0, import_theme.dropdown)({
      className
    }),
    [className]
  );
  const getPopoverProps = (props2 = {}) => ({
    state,
    placement,
    ref: popoverRef,
    disableAnimation,
    shouldBlockScroll,
    scrollRef: menuRef,
    triggerRef: menuTriggerRef,
    ...(0, import_utils.mergeProps)(otherProps, props2),
    classNames: {
      ...classNamesProp,
      ...props2.classNames,
      base: (0, import_shared_utils.clsx)(classNames, classNamesProp == null ? void 0 : classNamesProp.base, props2.className),
      arrow: (0, import_shared_utils.clsx)(classNamesProp == null ? void 0 : classNamesProp.arrow)
    }
  });
  const getMenuTriggerProps = (props2 = {}, _ref = null) => {
    const { onKeyDown, onPress, onPressStart, ...otherMenuTriggerProps } = menuTriggerProps;
    return {
      ...(0, import_utils.mergeProps)(otherMenuTriggerProps, props2),
      ref: (0, import_react_utils2.mergeRefs)(_ref, triggerRef)
    };
  };
  const getMenuProps = (props2 = {}, _ref = null) => ({
    ...(0, import_utils.mergeProps)(menuProps, props2),
    ref: (0, import_react_utils2.mergeRefs)(_ref, menuRef)
  });
  return {
    Component,
    classNames,
    closeOnSelect,
    onClose: state.close,
    autoFocus: state.focusStrategy || true,
    disableAnimation,
    getPopoverProps,
    getMenuTriggerProps,
    getMenuProps
  };
}

// src/dropdown.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Dropdown = (props) => {
  const { children, ...otherProps } = props;
  const context = useDropdown(otherProps);
  const [menuTrigger, menu] = import_react2.default.Children.toArray(children);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DropdownProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_popover.Popover, { ...context.getPopoverProps(), children: [
    menuTrigger,
    menu
  ] }) });
};
Dropdown.displayName = "NextUI.Dropdown";
var dropdown_default = Dropdown;

// src/dropdown-trigger.tsx
var import_system = require("@nextui-org/system");
var import_popover2 = require("@nextui-org/popover");
var import_jsx_runtime2 = require("react/jsx-runtime");
var DropdownTrigger = (0, import_system.forwardRef)((props, _) => {
  const { getMenuTriggerProps } = useDropdownContext();
  const { children, ...otherProps } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_popover2.PopoverTrigger, { ...getMenuTriggerProps(otherProps), children });
});
DropdownTrigger.displayName = "NextUI.DropdownTrigger";
var dropdown_trigger_default = DropdownTrigger;

// src/dropdown-menu.tsx
var import_popover3 = require("@nextui-org/popover");
var import_menu5 = require("@react-aria/menu");
var import_react_utils4 = require("@nextui-org/react-utils");
var import_tree = require("@react-stately/tree");
var import_theme4 = require("@nextui-org/theme");
var import_focus2 = require("@react-aria/focus");
var import_react6 = require("react");
var import_system5 = require("@nextui-org/system");

// src/dropdown-section.tsx
var import_theme3 = require("@nextui-org/theme");
var import_menu4 = require("@react-aria/menu");
var import_react5 = require("react");
var import_system4 = require("@nextui-org/system");
var import_utils3 = require("@react-aria/utils");
var import_shared_utils3 = require("@nextui-org/shared-utils");
var import_divider = require("@nextui-org/divider");

// src/dropdown-item.tsx
var import_react4 = require("react");
var import_system3 = require("@nextui-org/system");

// src/use-dropdown-item.ts
var import_react3 = require("react");
var import_theme2 = require("@nextui-org/theme");
var import_system2 = require("@nextui-org/system");
var import_focus = require("@react-aria/focus");
var import_react_utils3 = require("@nextui-org/react-utils");
var import_shared_utils2 = require("@nextui-org/shared-utils");
var import_menu3 = require("@react-aria/menu");
var import_utils2 = require("@react-aria/utils");
var import_interactions = require("@react-aria/interactions");
var import_use_is_mobile = require("@nextui-org/use-is-mobile");
function useDropdownItem(originalProps) {
  const [props, variantProps] = (0, import_system2.mapPropsVariants)(originalProps, import_theme2.dropdownItem.variantKeys);
  const {
    onClose,
    closeOnSelect: closeOnSelectGroup,
    disableAnimation: disableAnimationGroup
  } = useDropdownContext();
  const {
    as,
    item,
    state,
    shortcut,
    key: keyProp,
    description,
    startContent,
    endContent,
    isVirtualized,
    selectedIcon,
    className,
    classNames,
    onAction,
    autoFocus,
    onPress,
    onClick,
    isReadOnly = false,
    closeOnSelect = closeOnSelectGroup != null ? closeOnSelectGroup : true,
    ...otherProps
  } = props;
  const disableAnimation = disableAnimationGroup != null ? disableAnimationGroup : originalProps.disableAnimation;
  const domRef = (0, import_react3.useRef)(null);
  const Component = as || "li";
  const shouldFilterDOMProps = typeof Component === "string";
  const { rendered, key } = item;
  const isDisabled = state.disabledKeys.has(key) || originalProps.isDisabled;
  const isSelectable = state.selectionManager.selectionMode !== "none";
  const isMobile = (0, import_use_is_mobile.useIsMobile)();
  const { pressProps, isPressed } = (0, import_interactions.usePress)({
    ref: domRef,
    isDisabled,
    onPress
  });
  const { isHovered, hoverProps } = (0, import_interactions.useHover)({
    isDisabled
  });
  const { isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({
    autoFocus
  });
  const {
    isFocused,
    isSelected,
    menuItemProps,
    labelProps,
    descriptionProps,
    keyboardShortcutProps
  } = (0, import_menu3.useMenuItem)(
    {
      key,
      onClose,
      isDisabled,
      "aria-label": props["aria-label"],
      closeOnSelect,
      isVirtualized,
      onAction
    },
    state,
    domRef
  );
  let itemProps = menuItemProps;
  const slots = (0, import_react3.useMemo)(
    () => (0, import_theme2.dropdownItem)({
      ...variantProps,
      isDisabled,
      disableAnimation
    }),
    [...Object.values(variantProps), isDisabled, disableAnimation]
  );
  const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
  if (isReadOnly) {
    itemProps = (0, import_shared_utils2.removeEvents)(itemProps);
  }
  const getItemProps = (props2 = {}) => ({
    key: keyProp || key,
    ref: domRef,
    ...(0, import_utils2.mergeProps)(
      itemProps,
      isReadOnly ? {} : (0, import_utils2.mergeProps)(focusProps, pressProps),
      hoverProps,
      (0, import_react_utils3.filterDOMProps)(otherProps, {
        enabled: shouldFilterDOMProps
      }),
      props2
    ),
    "data-focus": (0, import_shared_utils2.dataAttr)(isFocused),
    "data-hover": (0, import_shared_utils2.dataAttr)(isMobile ? isHovered || isPressed : isHovered),
    "data-disabled": (0, import_shared_utils2.dataAttr)(isDisabled),
    "data-selected": (0, import_shared_utils2.dataAttr)(isSelected),
    "data-pressed": (0, import_shared_utils2.dataAttr)(isPressed),
    "data-focus-visible": (0, import_shared_utils2.dataAttr)(isFocusVisible),
    className: slots.base({ class: (0, import_shared_utils2.clsx)(baseStyles, props2.className) }),
    onClick: (0, import_utils2.chain)(pressProps.onClick, onClick)
  });
  const getLabelProps = (props2 = {}) => ({
    ...(0, import_utils2.mergeProps)(labelProps, props2),
    className: slots.title({ class: classNames == null ? void 0 : classNames.title })
  });
  const getDescriptionProps = (props2 = {}) => ({
    ...(0, import_utils2.mergeProps)(descriptionProps, props2),
    className: slots.description({ class: classNames == null ? void 0 : classNames.description })
  });
  const getKeyboardShortcutProps = (props2 = {}) => ({
    ...(0, import_utils2.mergeProps)(keyboardShortcutProps, props2),
    className: slots.shortcut({ class: classNames == null ? void 0 : classNames.shortcut })
  });
  const getSelectedIconProps = (0, import_react3.useCallback)(
    (props2 = {}) => {
      return {
        "aria-hidden": (0, import_shared_utils2.dataAttr)(true),
        "data-disabled": (0, import_shared_utils2.dataAttr)(isDisabled),
        className: slots.selectedIcon({ class: classNames == null ? void 0 : classNames.selectedIcon }),
        ...props2
      };
    },
    [isDisabled, slots, classNames]
  );
  return {
    Component,
    domRef,
    slots,
    classNames,
    isSelectable,
    isSelected,
    isDisabled,
    rendered,
    shortcut,
    description,
    startContent,
    endContent,
    selectedIcon,
    disableAnimation,
    getItemProps,
    getLabelProps,
    getDescriptionProps,
    getKeyboardShortcutProps,
    getSelectedIconProps
  };
}

// src/dropdown-selected-icon.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
function DropdownSelectedIcon(props) {
  const { isSelected, disableAnimation, ...otherProps } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    "svg",
    {
      "aria-hidden": "true",
      "data-selected": isSelected,
      role: "presentation",
      viewBox: "0 0 17 18",
      ...otherProps,
      children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        "polyline",
        {
          fill: "none",
          points: "1 9 7 14 15 4",
          stroke: "currentColor",
          strokeDasharray: 22,
          strokeDashoffset: isSelected ? 44 : 66,
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 1.5,
          style: !disableAnimation ? {
            transition: "stroke-dashoffset 200ms ease"
          } : {}
        }
      )
    }
  );
}

// src/dropdown-item.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var DropdownItem = (0, import_system3.forwardRef)((props, _) => {
  const {
    Component,
    slots,
    classNames,
    rendered,
    shortcut,
    description,
    isSelectable,
    isSelected,
    isDisabled,
    selectedIcon,
    startContent,
    endContent,
    disableAnimation,
    getItemProps,
    getLabelProps,
    getDescriptionProps,
    getKeyboardShortcutProps,
    getSelectedIconProps
  } = useDropdownItem(props);
  const selectedContent = (0, import_react4.useMemo)(() => {
    const defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(DropdownSelectedIcon, { disableAnimation, isSelected });
    if (typeof selectedIcon === "function") {
      return selectedIcon({ icon: defaultIcon, isSelected, isDisabled });
    }
    if (selectedIcon)
      return selectedIcon;
    return defaultIcon;
  }, [selectedIcon, isSelected, isDisabled, disableAnimation]);
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(Component, { ...getItemProps(), children: [
    startContent,
    description ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }), children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { ...getLabelProps(), children: rendered }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { ...getDescriptionProps(), children: description })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { ...getLabelProps(), children: rendered }),
    shortcut && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("kbd", { ...getKeyboardShortcutProps(), children: shortcut }),
    isSelectable && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { ...getSelectedIconProps(), children: selectedContent }),
    endContent
  ] });
});
DropdownItem.displayName = "NextUI.DropdownItem";
var dropdown_item_default = DropdownItem;

// src/dropdown-section.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var DropdownSection = (0, import_system4.forwardRef)(
  ({
    item,
    state,
    as,
    variant,
    color,
    key: keyProp,
    disableAnimation,
    onAction,
    closeOnSelect,
    className,
    classNames,
    showDivider = false,
    dividerProps = {},
    itemClasses,
    title,
    ...otherProps
  }, _) => {
    const Component = as || "li";
    const slots = (0, import_react5.useMemo)(() => (0, import_theme3.dropdownSection)(), []);
    const baseStyles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.base, className);
    const dividerStyles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.divider, dividerProps == null ? void 0 : dividerProps.className);
    const { itemProps, headingProps, groupProps } = (0, import_menu4.useMenuSection)({
      heading: item.rendered,
      "aria-label": item["aria-label"]
    });
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
      Component,
      {
        "data-slot": "base",
        ...(0, import_utils3.mergeProps)(itemProps, otherProps),
        className: slots.base({ class: baseStyles }),
        children: [
          item.rendered && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            "span",
            {
              ...headingProps,
              className: slots.heading({ class: classNames == null ? void 0 : classNames.heading }),
              "data-slot": "heading",
              children: item.rendered
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
            "ul",
            {
              ...groupProps,
              className: slots.group({ class: classNames == null ? void 0 : classNames.group }),
              "data-has-title": !!item.rendered,
              "data-slot": "group",
              children: [
                [...item.childNodes].map((node) => {
                  const { key: nodeKey, props: nodeProps } = node;
                  let dropdownItem2 = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
                    dropdown_item_default,
                    {
                      classNames: itemClasses,
                      closeOnSelect,
                      color,
                      disableAnimation,
                      item: node,
                      state,
                      variant,
                      onAction,
                      ...nodeProps
                    },
                    nodeKey
                  );
                  if (node.wrapper) {
                    dropdownItem2 = node.wrapper(dropdownItem2);
                  }
                  return dropdownItem2;
                }),
                showDivider && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
                  import_divider.Divider,
                  {
                    as: "li",
                    className: slots.divider({
                      class: dividerStyles
                    }),
                    ...dividerProps
                  }
                )
              ]
            }
          )
        ]
      },
      keyProp || item.key
    );
  }
);
DropdownSection.displayName = "NextUI.DropdownSection";
var dropdown_section_default = DropdownSection;

// src/dropdown-menu.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var DropdownMenu = (0, import_system5.forwardRef)(
  ({
    as,
    variant,
    color,
    disableAnimation,
    onAction,
    closeOnSelect,
    className,
    itemClasses,
    ...otherProps
  }, ref) => {
    const { getMenuProps } = useDropdownContext();
    const Component = as || "ul";
    const domRef = (0, import_react_utils4.useDOMRef)(ref);
    const state = (0, import_tree.useTreeState)(otherProps);
    const { menuProps } = (0, import_menu5.useMenu)(otherProps, state, domRef);
    const classNames = (0, import_react6.useMemo)(() => (0, import_theme4.dropdownMenu)({ className }), [className]);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_popover3.PopoverContent, { children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_focus2.FocusScope, { contain: true, restoreFocus: true, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Component, { ...getMenuProps({ ...menuProps }, domRef), className: classNames, children: [...state.collection].map((item) => {
      const itemProps = {
        closeOnSelect,
        color,
        disableAnimation,
        item,
        state,
        variant,
        onAction,
        ...item.props
      };
      if (item.type === "section") {
        return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(dropdown_section_default, { ...itemProps, itemClasses }, item.key);
      }
      let dropdownItem2 = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(dropdown_item_default, { ...itemProps, classNames: itemClasses }, item.key);
      if (item.wrapper) {
        dropdownItem2 = item.wrapper(dropdownItem2);
      }
      return dropdownItem2;
    }) }) }) });
  }
);
DropdownMenu.displayName = "NextUI.DropdownMenu";
var dropdown_menu_default = DropdownMenu;

// src/base/dropdown-item-base.tsx
var import_aria_utils = require("@nextui-org/aria-utils");
var DropdownItemBase = import_aria_utils.BaseItem;
var dropdown_item_base_default = DropdownItemBase;

// src/base/dropdown-section-base.tsx
var import_aria_utils2 = require("@nextui-org/aria-utils");
var DropdownSectionBase = import_aria_utils2.BaseSection;
var dropdown_section_base_default = DropdownSectionBase;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dropdown,
  DropdownItem,
  DropdownMenu,
  DropdownSection,
  DropdownTrigger,
  useDropdown
});
