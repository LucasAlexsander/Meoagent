"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/filter-dom-props.ts
var filter_dom_props_exports = {};
__export(filter_dom_props_exports, {
  filterDOMProps: () => filterDOMProps
});
module.exports = __toCommonJS(filter_dom_props_exports);
var DOMPropNames = /* @__PURE__ */ new Set([
  "id",
  "type",
  "className",
  "style",
  "title",
  "role",
  "tabIndex",
  "htmlFor",
  "width",
  "height"
]);
var propRe = /^(data-.*)$/;
var ariaRe = /^(aria-.*)$/;
var funcRe = /^(on[A-Z].*)$/;
function filterDOMProps(props, opts = {
  labelable: true,
  enabled: true
}) {
  let { labelable, propNames } = opts;
  let filteredProps = {};
  if (!opts.enabled) {
    return props;
  }
  for (const prop in props) {
    if (Object.prototype.hasOwnProperty.call(props, prop) && (DOMPropNames.has(prop) || labelable && ariaRe.test(prop) || (propNames == null ? void 0 : propNames.has(prop)) || propRe.test(prop)) || funcRe.test(prop)) {
      filteredProps[prop] = props[prop];
    }
  }
  return filteredProps;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  filterDOMProps
});
