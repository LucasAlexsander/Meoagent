{"mappings":";;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;CAUC;;;AA0BM,SAAS,0CAAoB,KAAgC,EAAE,KAAmB,EAAE,GAAiC;IAC1H,IAAI,QAAC,KAAI,EAAC,GAAG;IACb,IAAI,WAAW,CAAA,GAAA,YAAI;IACnB,IAAI,WAAW,CAAA,GAAA,YAAI;IACnB,IAAI,aAAa,MAAM,aAAa,IAAI,KAAK;IAC7C,IAAI,aAAC,UAAS,EAAC,GAAG,CAAA,GAAA,wBAAgB,EAAE;QAClC,kBAAkB,MAAM;QACxB,KAAK,KAAK;aACV;IACF;IACA,IAAI,eAAC,YAAW,EAAC,GAAG,CAAA,GAAA,gBAAQ,EAAE,CAAA,GAAA,iBAAS,EAAE,WAAkB;QACzD,IAAI;QACJ,aAAa;oBACb;QACA,SAAS,IAAM,MAAM,UAAU,KAAK;IACtC,IAAI;IACJ,IAAI,aAAa,MAAM,aAAa,IAAI,KAAK;IAC7C,OAAO;QACL,aAAa;YACX,GAAG,WAAW;YACd,iBAAiB;YACjB,iBAAiB,aAAa,WAAW;QAC3C;QACA,aAAa;YACX,IAAI;YACJ,MAAM;YACN,mBAAmB;QACrB;IACF;AACF;AAEO,SAAS,0CAAgB,KAA4B,EAAE,KAAmB,EAAE,GAA8B;IAC/G,IAAI,aAAC,UAAS,EAAC,GAAG,CAAA,GAAA,wBAAgB,EAAE;QAClC,GAAG,KAAK;QACR,GAAG,KAAK;QACR,qBAAqB;aACrB;IACF;IACA,OAAO;QACL,gBAAgB;YACd,GAAG,SAAS;YACZ,UAAU;QACZ;IACF;AACF;;CDtEC","sources":["packages/@react-aria/accordion/src/index.ts","packages/@react-aria/accordion/src/useAccordion.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useAccordionItem, useAccordion} from './useAccordion';\nexport type {AccordionAria, AccordionItemAria, AccordionItemAriaProps} from './useAccordion';\nexport type {AriaAccordionProps} from '@react-types/accordion';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaAccordionProps} from '@react-types/accordion';\nimport {ButtonHTMLAttributes, RefObject} from 'react';\nimport {DOMAttributes, Node} from '@react-types/shared';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {TreeState} from '@react-stately/tree';\nimport {useButton} from '@react-aria/button';\nimport {useSelectableItem, useSelectableList} from '@react-aria/selection';\n\nexport interface AccordionAria {\n  /** Props for the accordion container element. */\n  accordionProps: DOMAttributes\n}\n\nexport interface AccordionItemAriaProps<T> {\n  item: Node<T>\n}\n\nexport interface AccordionItemAria {\n  /** Props for the accordion item button. */\n  buttonProps: ButtonHTMLAttributes<HTMLElement>,\n  /** Props for the accordion item content element. */\n  regionProps: DOMAttributes\n}\n\nexport function useAccordionItem<T>(props: AccordionItemAriaProps<T>, state: TreeState<T>, ref: RefObject<HTMLButtonElement>): AccordionItemAria {\n  let {item} = props;\n  let buttonId = useId();\n  let regionId = useId();\n  let isDisabled = state.disabledKeys.has(item.key);\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: item.key,\n    ref\n  });\n  let {buttonProps} = useButton(mergeProps(itemProps as any, {\n    id: buttonId,\n    elementType: 'button',\n    isDisabled,\n    onPress: () => state.toggleKey(item.key)\n  }), ref);\n  let isExpanded = state.expandedKeys.has(item.key);\n  return {\n    buttonProps: {\n      ...buttonProps,\n      'aria-expanded': isExpanded,\n      'aria-controls': isExpanded ? regionId : undefined\n    },\n    regionProps: {\n      id: regionId,\n      role: 'region',\n      'aria-labelledby': buttonId\n    }\n  };\n}\n\nexport function useAccordion<T>(props: AriaAccordionProps<T>, state: TreeState<T>, ref: RefObject<HTMLDivElement>): AccordionAria {\n  let {listProps} = useSelectableList({\n    ...props,\n    ...state,\n    allowsTabNavigation: true,\n    ref\n  });\n  return {\n    accordionProps: {\n      ...listProps,\n      tabIndex: undefined\n    }\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}